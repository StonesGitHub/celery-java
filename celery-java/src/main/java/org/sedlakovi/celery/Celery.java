package org.sedlakovi.celery;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.google.common.base.Joiner;
import com.google.common.base.Suppliers;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import lombok.Builder;
import lombok.extern.java.Log;
import org.sedlakovi.celery.backends.rabbit.RabbitBackend;
import org.sedlakovi.celery.brokers.rabbit.RabbitBroker;
import org.sedlakovi.celery.brokers.rabbit.RabbitBrokerFactory;
import org.sedlakovi.celery.spi.Backend;
import org.sedlakovi.celery.spi.Broker;
import org.sedlakovi.celery.spi.Message;

import javax.annotation.Nullable;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URISyntaxException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.Supplier;

/**
 * A client allowing you to submit a task and get a {@link Future} describing the result.
 */
@Log
public class Celery {
    private final String clientId = UUID.randomUUID().toString();
    private final String clientName = clientId + "@" + InetAddress.getLocalHost().getHostName();
    private final ObjectMapper jsonMapper = new ObjectMapper();
    private final String queue;
    private final SingleItemCache<Optional<Backend.ResultsProvider>> resultsProvider;
    private final SingleItemCache<Broker> broker;
    private final ConnectionFactory connectionFactory;


    private static class SingleItemCache<T> {
        private static final Object KEY = new Object();
        private final ThrowingSupplier<T> supplier;
        private final LoadingCache<Object, T> cache = CacheBuilder.newBuilder().build(
                new CacheLoader<Object, T>() {
                    @Override
                    public T load(Object key) throws Exception {
                        assert key == KEY;
                        return supplier.get();
                    }
                }
        );

        SingleItemCache(ThrowingSupplier<T> supplier) {
            this.supplier = supplier;
        }

        T get() throws Exception {
            return cache.get(KEY);
        }

        interface ThrowingSupplier<T> {
            T get() throws Exception;
        }
    }



    /**
     * Create a Celery client that can submit tasks and get the results from the backend.
     *
     * @param broker for dispatching messages
     * @param backend task backend
     * @param queue routing tag (specifies into which Rabbit queue the messages will go)
     * @throws IOException
     */
    @Builder
    private Celery(final String brokerUri,
                   @Nullable final String queue,
                   @Nullable final String backendUri,
                   @Nullable final ExecutorService executor) throws IOException, URISyntaxException {

        this.queue = queue;

        connectionFactory = new ConnectionFactory();
        if (executor != null) {
            connectionFactory.setSharedExecutor(executor);
        } else {
            connectionFactory.setSharedExecutor(Executors.newCachedThreadPool());
        }

        try {
            connectionFactory.setUri(brokerUri);
        } catch (NoSuchAlgorithmException e) {
            throw new IOException(e);
        } catch (KeyManagementException e) {
            throw new IOException(e);
        }

        broker = new SingleItemCache<>( () ->
            new RabbitBrokerFactory().createBroker(
                    brokerUri,
                    executor != null ? executor : Executors.newCachedThreadPool()
            )
        );

        resultsProvider = new SingleItemCache<>( () -> {
            if (backendUri == null) {
                return Optional.empty();
            }

            backend = new RabbitBackend()
                resultsProvider = Optional.of(backend.resultsProviderFor(clientId));
            }
        });
    }

    /**
     * Submit a Java task for processing. You'll probably not need to call this method. rather use @{@link CeleryTask}
     * annotation.
     *
     * @param taskClass task implementing class
     * @param method method in {@code taskClass} that does the work
     * @param args positional arguments for the method (need to be JSON serializable)
     * @return asynchronous result
     *
     * @throws IOException
     */
    public AsyncResult<?> submit(Class<?> taskClass, String method, Object[] args) throws IOException {
        return submit(taskClass.getName() + "#" + method, args);
    }

    /**
     * Submit a task by name. A low level method for submitting arbitrary tasks that don't have their proxies
     * generated by @{@link CeleryTask} annotation.
     *
     * @param name task name as understood by the worker
     * @param args positional arguments for the method (need to be JSON serializable)
     * @return asynchronous result
     * @throws IOException
     */
    public AsyncResult<?> submit(String name, Object[] args) throws IOException {
        String taskId = UUID.randomUUID().toString();

        trySend(name, args, taskId);

        Future<Object> result;
        if (resultsProvider.isPresent()) {
            result = resultsProvider.get().getResult(taskId);
        } else {
            result = CompletableFuture.completedFuture(null);
        }
        return new AsyncResultImpl<Object>(result);
    }

    private void trySend(String name, Object[] args, String taskId) throws IOException {
        ArrayNode payload = jsonMapper.createArrayNode();
        ArrayNode argsArr = payload.addArray();
        for (Object arg : args) {
            argsArr.addPOJO(arg);
        }
        payload.addObject();
        payload.addObject()
                .putNull("callbacks")
                .putNull("chain")
                .putNull("chord")
                .putNull("errbacks");

        Message message = broker.get().newMessage();
        message.setBody(jsonMapper.writeValueAsBytes(payload));
        message.setContentEncoding("utf-8");
        message.setContentType("application/json");

        Message.Headers headers = message.getHeaders();
        headers.setId(taskId);
        headers.setTaskName(name);
        headers.setArgsRepr("(" + Joiner.on(", ").join(args) + ")");
        headers.setOrigin(clientName);
        if (resultsProvider.isPresent()) {
            headers.setReplyTo(clientId);
        }

        message.send(queue);
    }

    public interface AsyncResult<T> {
        boolean isDone();

        T get() throws ExecutionException, InterruptedException;
    }

    private class AsyncResultImpl<T> implements AsyncResult<T> {

        private final Future<T> future;

        AsyncResultImpl(Future<T> future) {
            this.future = future;
        }

        @Override
        public boolean isDone() {
            return future.isDone();
        }

        @Override
        public T get() throws ExecutionException, InterruptedException {
            return future.get();
        }
    }
}
